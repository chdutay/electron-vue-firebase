//import EventEmitter from 'events'
import Firebase from 'firebase'
import bus from '../bus.js'
import download from '../download'

// ENTER YOUR FIREBASE URL BELOW

// Initialize Firebase
let config = {
    apiKey: "AIzaSyA75zV9V8yUgdHRW1OI9SRCyRUveug8Dxo",
    authDomain: "electron-vue-firebase.firebaseapp.com",
    databaseURL: "https://electron-vue-firebase.firebaseio.com",
    projectId: "electron-vue-firebase",
    storageBucket: "electron-vue-firebase.appspot.com",
    messagingSenderId: "384426481642"
};

let app = Firebase.initializeApp(config)
const db = app.database()

const maxDownload = 2;

const bookmarksRef = db.ref('bookmarks')

let bookmarks = {}

// force loading
function reload() {
    bookmarksRef.once('value', (snapshot) => {
        console.log("Refresh once")
        bookmarks = snapshot.val()
        bus.$emit('data-updated', bookmarks)
    })
}

// manage download on child change
bookmarksRef.on('value', (snapshot) => {
    console.log("Refresh on each")
    download.manageDownload(snapshot)
})

// refresh list on new child
bookmarksRef.on('child_added', (snapshot) => {
    console.log("Refresh on child added")
    reload();
})

// refresh list on remove child
bookmarksRef.on('child_removed', (snapshot) => {
    console.log("Refresh on child removed")
    reload();
})

// first loading
reload()

// export
export default {

    addBookmark(bookmark) {
        bookmark.title = download.getFilenameFromUrl(bookmark.url);

        bookmark.received_bytes = 0;
        bookmark.total_bytes = 1;
        bookmark.state = 0; // waiting
        
        // Generate a reference to a new location and add some data using push()
        var newBookmarkRef = bookmarksRef.push(bookmark)
        
        // Get the unique key generated by push()
        var bookmarkId = newBookmarkRef.key

        console.log("Add new bookmarkId=" + bookmarkId)
    },

    updateProgressBookmark(bookmarkId, received_bytes, total_bytes, state) {

        console.log("Update bookmarkId=" + bookmarkId)

        bookmarksRef.child(bookmarkId).update({
            "received_bytes": received_bytes,
            "total_bytes": total_bytes,
            "state": state // finish
        });
    },

    deleteBookmark(bookmarkId) {

        bookmarksRef.child(bookmarkId).remove()
    },

}
